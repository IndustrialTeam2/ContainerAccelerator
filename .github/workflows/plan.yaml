# Use this file as the baseline, and copy some parts of the daniel-workflow.yml file

name: Terraform Plan and Apply

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed

jobs:
       
  tf_plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Terraform with specified version
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-1
      
      - name: Download artifact - state
        id: dnld_state
        uses: dawidd6/action-download-artifact@v2
        with:
          name: terraform-state
          search_artifacts: true
        continue-on-error: true

      - name: Decrypt state file
        if: steps.dnld_state.outcome == 'success' 
        run:
          openssl aes-256-cbc -d -in terraform.tfstate.enc -out terraform.tfstate -k ${{ secrets.ENCRYPTION_KEY }}
        continue-on-error: true

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Set up and initialize Pluralith
      - name: Pluralith Init
        uses: Pluralith/actions/init@v1.4.0
        with:
          terraform-path: "${{ env.working-directory }}"
          api-key: ${{ secrets.PLURALITH_API_KEY }}

    # Run Pluralith to generate an infrastructure diagram and comment body
      - name: Pluralith Run
        uses: Pluralith/actions/run@v1.4.0
        with:
          terraform-command: "plan"
          terraform-path: "${{ env.working-directory }}"
          show-changes: true
          show-drift: true

      - name: Import Terraform state
        #if: steps.dnld_state.outcome == 'success'
        run: terraform import terraform-state/terraform-state
        continue-on-error: true

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Generate Terraform Plan Comment
        run: |
            COMMENT="### Terraform Plan\n\`\`\`hcl\n$(terraform show tfplan)\n\`\`\`"
            echo "$COMMENT" > comment.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform artifact comment
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan-comment
          path: comment.md

      - name: Terraform artifact plan file
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan-file
          path: tfplan

  comment_pr:
    runs-on: ubuntu-latest
    needs: tf_plan
    name: Comment on PR
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Terraform Plan comment
        uses: actions/download-artifact@v2
        with:
          name: terraform-plan-comment
          path: .

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ./comment.md
          # message: "Hello world! :wave:"

  tf_apply:
    name: Apply Terraform Plan on PR Merge
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-1

      - name: Download artifact - state
        uses: dawidd6/action-download-artifact@v2
        with:
          name: terraform-state
          search_artifacts: true
        continue-on-error: true

      - name: Download artifact - plan
        uses: dawidd6/action-download-artifact@v2
        with:
          name: terraform-plan-file
          path: .
          search_artifacts: true
        continue-on-error: true

      - name: Decrypt state file
        run:
          openssl aes-256-cbc -d -in terraform.tfstate.enc -out terraform.tfstate -k ${{ secrets.ENCRYPTION_KEY }}
        continue-on-error: true

      - name: Terraform Initialise
        run: terraform init
      
      - name: Import Terraform State
        run:
          terraform import terraform-state/terraform/state
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve ./tfplan
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Encrypt file
        run:
            openssl aes-256-cbc -e -in terraform.tfstate -out terraform.tfstate.enc -k ${{ secrets.ENCRYPTION_KEY }}
      #
      - name: Upload Terraform state artifact
        uses: actions/upload-artifact@v2
        with:
          name: terraform-state
          path: ./terraform.tfstate.enc
      
  infra_test: 
    name: Infrastructure Test
    needs: tf_apply
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-1

      # - name: Setup kubeconfig
      #   run: |
      #     aws eks --region $(terraform output -raw region) update-kubeconfig --name $(terraform output -raw cluster_name)
      #   continue-on-error: false

      - name: Install dependencies
        uses: actions/setup-python@v3
      - run: pip install -r py-requirements.txt

      - name: Run cluster test
        uses: actions/setup-python@v3
      - run: python test_cluster_configuration.py
        continue-on-error: false

